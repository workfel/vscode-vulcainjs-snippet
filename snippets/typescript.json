{
    "Vulcain ActionHandler": {
        "prefix": "vc-actionhandler",
        "body": [
            "import { ActionHandler, Action, DefaultActionHandler, Inject } from \"vulcain-corejs\";",
            "\n",
            "@ActionHandler({ async: false, scope: \"?\", schema: \"$2\" })",
            "export class $1ActionHandler extends DefaultActionHandler {",
            "\n",
            "@Action({ description: \"$4\", outputSchema: \"$2\" }) // action = method name (minus Async)",
            "async $3Async() {",
            "\n",
            "}",
            "\n",
            "}"
        ],
        "description": "Vulcain ActionHandler"
    },
    "Vulcain QueryHandler": {
        "prefix": "vc-queryhandler",
        "body": [
            "import { QueryHandler, DefaultQueryHandler } from \"vulcain-corejs\";",
            "\n",
            "@QueryHandler({ scope: \"?\", schema: \"$1\" })",
            "export class $1QueryHandler extends DefaultQueryHandler<$1> {",
            "{",
            "\n",
            "}"
        ],
        "description": "Vulcain QueryHandler"
    },
    "Vulcain EventHandler": {
        "prefix": "vc-eventhandler",
        "body": [
            "import { EventHandler, Consume, AbstractEventHandler, EventData, System } from \"vulcain-corejs\";",
            "import * as rx from \"rxjs\";",
            "\n",
            "@EventHandler({ schema: \"$2\", subscribeToDomain: System.domainName })",
            "export class $2EventHandler extends AbstractEventHandler {",
            "{",
            "\n",
            "@Consume({ description: \"Simple event handler\", subscribeToAction: \"create\", filter: (events: rx.Observable<EventData>) => events.filter(e => e.status === \"Success\") })",
            "async $1CustomerAsync(customer: $2) {",
            "console.log(`$customer created`);",
            "   return true;",
            "}",
            "\n",
            "}"
        ],
        "description": "Vulcain EventHandler"
    }
}